
### NOVO ARQUIVO ABAIXO ###

# cat provisioning/roles/criando-instancias/tasks/provisioning.yml

- name: Criando o Sec Group
  local_action:
    module: ec2_group
    name: "{{ sec_group_name }}"
    description: sg giropops
    profile: "{{ profile }}"
    region: "{{ region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
      rule_desc: SSH
    - proto: tcp
      from_port: 2379
      to_port: 2380
      cidr_ip: 0.0.0.0/0
      rule_desc: etcd server API
    - proto: tcp
      from_port: 6443
      to_port: 6443
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-apiserver
    - proto: tcp
      from_port: 10250
      to_port: 10250
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API
    - proto: tcp
      from_port: 10251
      to_port: 10251
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-scheduler
    - proto: tcp
      from_port: 10252
      to_port: 10252
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-controller-manager
    - proto: tcp
      from_port: 10255
      to_port: 10255
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API Read-only
    - proto: tcp
      from_port: 30000
      to_port: 32767
      cidr_ip: 0.0.0.0/0
      rule_desc: NodePort Services
    - proto: tcp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: WeaveNet
    - proto: udp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    - proto: udp
      from_port: 6784
      to_port: 6784
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    rules_egress:
    rules_egress:
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0
  register: basic_firewall

- name: Criando a instancia EC2
  local_action: ec2
    group={{ sec_group_name }}
    instance_type={{ instance_type }}
    image={{ image }}
    profile={{ profile }}
    wait=true
    region={{ region }}
    keypair={{ keypair }}
    count={{ count }}
  register: ec2

- name: Adicionando a instancia ao inventario temp
  add_host: name={{ item.public_ip  }} groups=giropops-new
  with_items: "{{ ec2.instances }}"

- name: Adicionando o IP publico da instancia criada ao arquivo hosts
  local_action: lineinfile
    dest="./hosts"
    regexp={{ item.public_ip }}
    insertafter="[kubernetes]" line={{ item.public_ip }}
  with_items: "{{ ec2.instances }}"


- name: Adicionando o IP privado da instancia criada ao arquivo hosts
  local_action: lineinfile
    dest="./hosts"
    regexp={{ item.private_ip }}
    insertafter="[kubernetes]" line={{ item.private_ip }}
  with_items: "{{ ec2.instances }}"

- name: Esperando o SSH
  local_action: wait_for
    host={{ item.public_ip }}
    port=22
    state=started
  with_items: "{{ ec2.instances }}"

- name: Adicionando uma tag na instancia
  local_action: ec2_tag resource={{ item.id }} region={{ region }} profile={{ profile }} state=present
  with_items: "{{ ec2.instances }}"
  args:
    tags:
      Name: ansible-{{ item.ami_launch_index|int + 1 }}

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/hosts

[k8s-master]

[k8s-workers]


[k8s-workers:vars]
K8S_MASTER_NODE_IP=
K8S_API_SECURE_PORT=6443

### NOVO ARQUIVO ABAIXO ###

 # cat install_k8s/main.yml

- hosts: all
  become: yes
  user: ubuntu
  gather_facts: no
  pre_tasks:
  - name: 'Atualizando o repo'
    raw: 'apt-get update'
  - name: 'Instalando o Python'
    raw: 'apt-get install -y python'
  roles:
  - { role: install-k8s, tags: ["install_k8s_role"]  }

- hosts: k8s-master
  become: yes
  user: ubuntu
  roles:
  - { role: create-cluster, tags: ["create_cluster_role"] }

- hosts: k8s-workers
  become: yes
  user: ubuntu
  roles:
  - { role: join-workers, tags: ["join_workers_role"] }

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/roles/install-k8s/tasks/install.yml

- name: Instalando o Docker
  shell: curl -fsSL https://get.docker.com | bash

- name: Adicionando as chaves do repo apt do k8s
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adicionando o repo do k8s
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: Instalando os pacotes kubeadm, kubelet e kubectl
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - kubelet
    - kubeadm
    - kubectl

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/roles/install-k8s/tasks/main.yml

---
# tasks file for install-k8s
- include: install.yml

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/roles/create-cluster/tasks/init-cluster.yml

- name: Removendo cluster antigo
  command:
    kubeadm reset --force
  register: kubeadm_reset

- name: Inicializando o cluster k8s
  command:
    kubeadm init
  register: kubeadm_init

- name: Criando o diretorio .kube
  file:
    path: ~/.kube
    state: directory

- name: Linkando o arquivo admin.conf para o ~/.kube/config
  file:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    state: link

- name: Configurando o pod network Weavenet
  shell: kubectl apply -f {{ default_url_weavenet }}
  register: weavenet_result

- name: Pegando o token para adicionar os workers no cluster
  shell: kubeadm token list | cut -d ' ' -f1  | sed -n '2p'
  register: k8s_token

- name: CA Hash
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  register: k8s_master_ca_hash

- name: Adicionando o token e o hash em um dummy host
  add_host:
    name: "K8S_TOKEN_HOLDER"
    token: "{{ k8s_token.stdout }}"
    hash: "{{ k8s_master_ca_hash.stdout }}"

- name:
  debug:
    msg: "[MASTER] K8S_TOKEN_HOLDER - O token eh {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"

- name:
  debug:
    msg: "[MASTER] K8S_TOKEN_HOLDER - O hash eh {{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}"

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/roles/create-cluster/tasks/main.yml

---
# tasks file for create-cluster
- include: init-cluster.yml

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/roles/create-cluster/vars/main.yml

---
# vars file for create-cluster
default_url_weavenet: "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/roles/join-workers/tasks/join-cluster.yml

- name:
  debug:
    msg: "[WORKER] K8S_TOKEN_HOLDER - O token eh {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"

- name:
  debug:
    msg: "[WORKER] K8S_TOKEN_HOLDER - O hash eh {{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}"

- name: Removendo o cluster
  command:
    kubeadm reset --force
  register: kubeadm_reset

- name: Adicionando o worker ao cluster k8s
  shell:
    kubeadm join --token={{ hostvars['K8S_TOKEN_HOLDER']['token'] }}
    --discovery-token-ca-cert-hash sha256:{{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}
    {{K8S_MASTER_NODE_IP}}:{{K8S_API_SECURE_PORT}}

### NOVO ARQUIVO ABAIXO ###

# cat install_k8s/roles/join-workers/tasks/main.yml

---
# tasks file for join-workers
- include: join-cluster.yml

### NOVO ARQUIVO ABAIXO ###

# cat .ansible.cfg

[defaults]
host_key_checking = False